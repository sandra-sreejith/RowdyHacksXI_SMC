#include <Wire.h>
#include <stdint.h>

#define PLAYER1 (uint8_t)(0x08)
#define PLAYER2 (uint8_t)(0x16)
#define SYNC_BYTE (uint8_t)(0xC8)
#define LED_PIN 13  // Use safe output pin

enum types {
  INITIALIZE, GAME_START, POKE, GAME_END
};

int makePacket(uint8_t *packet, uint8_t type, uint32_t *payload);

void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  Wire.begin(); // Master mode
  Wire.setTimeout(100);
  Serial.begin(9600);

  // Send INITIALIZE to both players
  uint8_t pkt[8];
  size_t size = makePacket(pkt, INITIALIZE, NULL);

  Wire.beginTransmission(PLAYER1);
  Wire.write(pkt, size);
  Wire.endTransmission();

  Wire.beginTransmission(PLAYER2);
  Wire.write(pkt, size);
  Wire.endTransmission();
}

void loop() {
  size_t n_rx = 0;
  uint8_t buf[8] = {0};
  uint32_t n_rounds = 0;
  uint8_t starter = 0;

  // Wait for either player to send GAME_START
  while (!starter) {
    n_rx = Wire.requestFrom(PLAYER1, 7);
    if (n_rx > 0) {
      Wire.readBytes(buf, n_rx);
      starter = PLAYER1;
      memcpy(&n_rounds, &buf[3], sizeof(uint32_t));
      break;
    }

    n_rx = Wire.requestFrom(PLAYER2, 7);
    if (n_rx > 0) {
      Wire.readBytes(buf, n_rx);
      starter = PLAYER2;
      memcpy(&n_rounds, &buf[3], sizeof(uint32_t));
      break;
    }

    delay(100);
  }

  Serial.print("Rounds selected: ");
  Serial.println(n_rounds);

  uint8_t other = (starter == PLAYER1) ? PLAYER2 : PLAYER1;

  // Tell other player to start
  uint8_t pkt[8];
  size_t size = makePacket(pkt, GAME_START, &n_rounds);
  Wire.beginTransmission(other);
  Wire.write(pkt, size);
  Wire.endTransmission();

  delay(random(1000, 5000)); // suspense delay
  digitalWrite(LED_PIN, HIGH);

  // Send POKE to both
  size = makePacket(pkt, POKE, NULL);
  Wire.beginTransmission(PLAYER1); Wire.write(pkt, size); Wire.endTransmission();
  Wire.beginTransmission(PLAYER2); Wire.write(pkt, size); Wire.endTransmission();

  // Wait for a GAME_END (first to die)
  uint8_t loser = 0;
  unsigned long t_fb = 0, t_sb = 0;

  while (!loser) {
    n_rx = Wire.requestFrom(PLAYER1, 7);
    if (n_rx > 0) { Wire.readBytes(buf, n_rx); loser = PLAYER1; t_fb = micros(); break; }

    n_rx = Wire.requestFrom(PLAYER2, 7);
    if (n_rx > 0) { Wire.readBytes(buf, n_rx); loser = PLAYER2; t_fb = micros(); break; }

    delay(20);
  }

  uint8_t winner = (loser == PLAYER1) ? PLAYER2 : PLAYER1;

  // Wait for the other playerâ€™s report
  do {
    n_rx = Wire.requestFrom((int)((loser == PLAYER1) ? PLAYER2 : PLAYER1), 7);
  } while (n_rx == 0);
  t_sb = micros();

  int32_t t_win = t_sb - t_fb;
  int32_t t_loss = -t_win;

  // Notify both players of the result
  size = makePacket(pkt, GAME_END, &t_win);
  Wire.beginTransmission(winner);
  Wire.write(pkt, size);
  Wire.endTransmission();

  size = makePacket(pkt, GAME_END, &t_loss);
  Wire.beginTransmission(loser);
  Wire.write(pkt, size);
  Wire.endTransmission();

  digitalWrite(LED_PIN, LOW);
  while (1);
}

int makePacket(uint8_t *packet, uint8_t type, uint32_t *payload) {
  int8_t len = ((type == INITIALIZE) || (type == POKE)) ? 1 :
               (type == GAME_START) ? (sizeof(uint32_t) + 1) :
               (type == GAME_END)   ? (sizeof(int32_t) + 1) : -1;

  if (len < 0) return -1;

  packet[0] = SYNC_BYTE;
  packet[1] = len;
  packet[2] = type;
  if (payload != NULL && len > 1)
    memcpy(&(packet[3]), payload, len - 1);

  return len + 2;
}
